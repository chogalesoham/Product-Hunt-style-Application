name: Security Audit

on:
  schedule:
    # Run security audit every day at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        directory: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.directory }}/package-lock.json'

      - name: Install dependencies
        working-directory: ./${{ matrix.directory }}
        run: npm ci --audit

      - name: Run npm audit
        working-directory: ./${{ matrix.directory }}
        run: |
          npm audit --audit-level=moderate
          npm audit fix --dry-run

      - name: Run npm audit (allow failures for info)
        working-directory: ./${{ matrix.directory }}
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Check for known vulnerabilities
        working-directory: ./${{ matrix.directory }}
        run: |
          if npm audit --audit-level=critical --json > audit-results.json; then
            echo "No critical vulnerabilities found"
          else
            echo "Critical vulnerabilities detected!"
            cat audit-results.json
            exit 1
          fi

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        directory: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install license checker
        run: npm install -g license-checker

      - name: Install dependencies
        working-directory: ./${{ matrix.directory }}
        run: npm ci

      - name: Check licenses
        working-directory: ./${{ matrix.directory }}
        run: |
          license-checker --summary
          license-checker --excludePrivatePackages --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD" || true

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD