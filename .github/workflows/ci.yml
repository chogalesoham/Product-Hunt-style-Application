name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  # Security and dependency scanning
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Frontend CI/CD
  frontend:
    name: Frontend CI/CD
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run Prettier check
        working-directory: ./frontend
        run: npm run format -- --check

      - name: Type checking (if TypeScript)
        working-directory: ./frontend
        run: |
          if [ -f "tsconfig.json" ]; then
            npm run type-check || echo "No type-check script found"
          fi
        continue-on-error: true

      - name: Run tests
        working-directory: ./frontend
        run: |
          if npm run test --silent 2>/dev/null; then
            npm run test -- --coverage --watchAll=false
          else
            echo "No test script found, skipping tests"
          fi
        continue-on-error: true

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ matrix.node-version }}
          path: frontend/.next/
          retention-days: 7

      - name: Analyze bundle size
        working-directory: ./frontend
        run: |
          if [ -d ".next" ]; then
            npx @next/bundle-analyzer || echo "Bundle analyzer not available"
          fi
        continue-on-error: true

  # Backend CI/CD
  backend:
    name: Backend CI/CD
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        working-directory: ./backend
        run: npm run lint

      - name: Run Prettier check
        working-directory: ./backend
        run: |
          if npm run format --silent 2>/dev/null; then
            npm run format -- --check
          else
            echo "No format script found, skipping"
          fi
        continue-on-error: true

      - name: Run tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DB_URI: mongodb://test:test@localhost:27017/test?authSource=admin
          JWT_SECRET: test-secret-key
        run: |
          if npm run test --silent 2>/dev/null; then
            npm run test -- --coverage
          else
            echo "No test script found, skipping tests"
          fi
        continue-on-error: true

      - name: Start application (health check)
        working-directory: ./backend
        env:
          NODE_ENV: test
          DB_URI: mongodb://test:test@localhost:27017/test?authSource=admin
          JWT_SECRET: test-secret-key
          PORT: 3001
        run: |
          npm start &
          sleep 10
          curl -f http://localhost:3001/health || curl -f http://localhost:3001/ || echo "Health check failed"
          pkill -f "node"
        continue-on-error: true

  # Code Quality & Security Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
        continue-on-error: true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        continue-on-error: true

  # Build and Push Docker Images (only on main branch)
  docker-build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production..."
          echo "This is where you would integrate with your deployment platform"
          echo "Examples: AWS ECS, Azure Container Instances, Google Cloud Run, etc."
          
          # Example deployment commands:
          # - Update ECS service
          # - Deploy to Kubernetes cluster
          # - Update Docker Compose on server
          # - Trigger deployment webhook
          
      - name: Notify deployment status
        if: always()
        run: |
          echo "ðŸ“¢ Deployment completed with status: ${{ job.status }}"
          # Add Slack/Discord/Teams notification here    